{"ast":null,"code":"var _jsxFileName = \"/Users/prince/Priyansh/Development/react-js-course/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  // Separate states\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); //You can have multiple states per component so can use useState for each component; States in these componenets are separated from each other\n  //State combined into one\n  // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '', //Intial Form values are blank\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  // });\n\n  const titleChangeHandler = event => {\n    //When state separate, use this:\n    setEnteredTitle(event.target.value); // For combined state\n    // setUserInput({\n    //     ...userInput, //spread operator; to copy existing userInput state values \n    //     enteredTitle: event.target.value, //to update the title\n    // });\n    //To prevent synchronization problem and get the latest state everytime in prevState\n    // setUserInput((prevState) => { \n    //     return { ...prevState, enteredTitle: event.target.value};\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    // When state separate, use this:\n    setEnteredAmount(event.target.value); // For combined state\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value, //Event Target Value is always a string \n    // }); \n  };\n\n  const dateChangeHandler = event => {\n    // When state separate, use this:\n    setEnteredDate(event.target.value); // For combined state\n    // setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value,  \n    // }); \n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // JavaScript function to prevent page reload\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate) //since enteredDate will be string, we need to convert into Date object\n\n    };\n    console.log(expenseData);\n    setEnteredTitle('');\n    setEnteredDate('');\n    setEnteredAmount('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2020-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"sPl3hHJ0hPqwAiAS86pYldA5b1E=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["/Users/prince/Priyansh/Development/react-js-course/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","console","log"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport './ExpenseForm.css';\n\nconst ExpenseForm = () => {\n\n    // Separate states\n    const [enteredTitle,setEnteredTitle] = useState('');\n    const [enteredAmount,setEnteredAmount] = useState('');\n    const [enteredDate,setEnteredDate] = useState(''); //You can have multiple states per component so can use useState for each component; States in these componenets are separated from each other\n    \n    //State combined into one\n    // const [userInput, setUserInput] = useState({\n    //     enteredTitle: '', //Intial Form values are blank\n    //     enteredAmount: '',\n    //     enteredDate: '',\n    // });\n\n    const titleChangeHandler = (event) => {\n        //When state separate, use this:\n        setEnteredTitle(event.target.value);\n\n        // For combined state\n        // setUserInput({\n        //     ...userInput, //spread operator; to copy existing userInput state values \n        //     enteredTitle: event.target.value, //to update the title\n        // });\n\n        //To prevent synchronization problem and get the latest state everytime in prevState\n        // setUserInput((prevState) => { \n        //     return { ...prevState, enteredTitle: event.target.value};\n        // });\n    };\n\n    const amountChangeHandler = (event) => {\n        // When state separate, use this:\n        setEnteredAmount(event.target.value);\n        \n        // For combined state\n        // setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value, //Event Target Value is always a string \n        // }); \n    };\n\n    const dateChangeHandler = (event) => {\n        // When state separate, use this:\n        setEnteredDate(event.target.value);\n\n        // For combined state\n        // setUserInput({\n        //     ...userInput,\n        //     enteredDate: event.target.value,  \n        // }); \n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault(); // JavaScript function to prevent page reload\n        const expenseData = {\n            title: enteredTitle,\n            amount: enteredAmount,\n            date: new Date(enteredDate),//since enteredDate will be string, we need to convert into Date object\n        };\n        console.log(expenseData);\n        setEnteredTitle('');\n        setEnteredDate('');\n        setEnteredAmount('');\n    };\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div className = 'new-expense__controls'>\n                <div className = 'new-expense__control'>\n                    <label>Title</label>\n                    <input type = \"text\" value = {enteredTitle} onChange = {titleChangeHandler} /> \n                </div>\n                <div className = 'new-expense__control'>\n                    <label>Amount</label>\n                    <input type = \"number\" min = \"0.01\" step = \"0.01\" value = {enteredAmount} onChange = {amountChangeHandler} />\n                </div>\n                <div className = 'new-expense__control'>\n                    <label>Date</label>\n                    <input type = \"date\" min = \"2019-01-01\" max = \"2020-12-31\" value = {enteredDate} onChange = {dateChangeHandler} />\n                </div>\n            </div>\n            <div className = \"new-expense__actions\">\n                <button type = \"submit\">Add Expense</button>\n            </div>\n        </form>\n    );\n}\n\nexport default ExpenseForm;"]},"metadata":{},"sourceType":"module"}